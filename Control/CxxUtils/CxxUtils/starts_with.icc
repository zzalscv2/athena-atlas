/*
 * Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration.
 */
/**
 * @file starts_with.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Mar, 2023
 * @brief C++20-like starts_with/ends_with for strings.
 */


#include <cstring>


namespace CxxUtils {

/**
 * @brief Test whether one null-terminated byte string starts with another.
 * @param s null-terminated byte string  in which to search.
 * @param prefix Prefix for which to search.
 *
 * Returns true if null-terminated byte string @c s starts with @c prefix.
 */
inline
bool starts_with (const char* s, const char* prefix)
{
  return strncmp(s, prefix, strlen(prefix)) == 0;
}

/**
 * @brief Test whether one string starts with another.
 * @param s String in which to search.
 * @param prefix Prefix for which to search.
 *
 * Returns true if string @c s starts with @c prefix.
 */
inline
bool starts_with (const std::string& s, const char* prefix){
  return starts_with(s.c_str(), prefix);
}

/**
 * @brief Test whether one string starts with another.
 * @param s String in which to search.
 * @param prefix Prefix for which to search.
 *
 * Returns true if string @c s starts with @c prefix.
 */
inline
bool starts_with (const std::string& s, const std::string& prefix)
{
  return strncmp (s.c_str(), prefix.c_str(), prefix.size()) == 0;
}

/**
 * @brief Test whether one null-terminated byte string ends with another.
 * @param s null-terminated byte string  in which to search.
 * @param suffix Suffix for which to search.
 *
 * Returns true if null-terminated byte string @c s starts with @c suffix.
 */
inline
bool ends_with (const char* s, const char* suffix){
  const size_t size_s = strlen(s);
  const size_t size_suffix = strlen(suffix);
  return size_s >= size_suffix &&
    strcmp (s + size_s - size_suffix, suffix) == 0;
}

/**
 * @brief Test whether one string starts ends another.
 * @param s String in which to search.
 * @param suffix Suffix for which to search.
 *
 * Returns true if string @c s starts with @c suffix.
 */
inline
bool ends_with (const std::string& s, const char* suffix){
  const size_t size_s =  s.size();
  const size_t size_suffix = strlen(suffix);
  return size_s >= size_suffix &&
    strcmp (s.c_str() + size_s - size_suffix, suffix) == 0;
}

/**
 * @brief Test whether one string ends with another.
 * @param s String in which to search.
 * @param suffix Suffix for which to search.
 *
 * Returns true if string @c s ends with @c suffix.
 */
inline
bool ends_with (const std::string& s, const std::string& suffix)
{
  return s.size() >= suffix.size() &&
    strcmp (s.c_str() + s.size() - suffix.size(), suffix.c_str()) == 0;
}


} // namespace CxxUtils
