/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/
#ifndef MUONREADOUTGEOMETRYR4_STRIPDESIGN_ICC
#define MUONREADOUTGEOMETRYR4_STRIPDESIGN_ICC

namespace MuonGMR4 {
    inline const Amg::Vector2D& StripDesign::cornerBotLeft() const { return m_bottomLeft; }
    inline const Amg::Vector2D& StripDesign::cornerBotRight() const { return m_bottomRight; }
    inline const Amg::Vector2D& StripDesign::cornerTopLeft() const { return m_topLeft; }
    inline const Amg::Vector2D& StripDesign::cornerTopRight() const { return m_topRight; }
    
    inline const Amg::Vector2D& StripDesign::edgeDirBottom() const { return m_dirBotEdge; }
    inline const Amg::Vector2D& StripDesign::edgeDirTop() const { return m_dirTopEdge; }    
    inline const Amg::Vector2D& StripDesign::edgeDirLeft() const { return m_dirLeftEdge; }
    inline const Amg::Vector2D& StripDesign::edgeDirRight() const { return m_dirRightEdge; } 

    inline double StripDesign::stripPitch() const { return m_stripPitch; }
    inline double StripDesign::stripWidth() const { return m_stripWidth; }
    inline double StripDesign::halfWidth() const { return m_halfX; }
    inline double StripDesign::shortHalfHeight() const { return m_shortHalfY; }
    inline double StripDesign::longHalfHeight() const { return m_longHalfY; }
    inline int StripDesign::numStrips() const { return m_numStrips; }
    inline bool StripDesign::hasStereoAngle() const { return m_hasStereo; }
    inline bool StripDesign::isFlipped() const { return m_isFlipped; }
    inline double StripDesign::stereoAngle() const {return m_stereoAngle; }
    inline int StripDesign::firstStripNumber() const { return m_channelShift; }
    inline Amg::Vector2D StripDesign::stripPosition(int stripCh) const {
        return m_firstStripPos + (1.*stripCh) * stripPitch() *  Amg::Vector2D::UnitX();
    }
    
    inline Amg::Vector2D StripDesign::leftInterSect(int stripCh, bool uncapped) const {
        /// Nominal strip position position
        return leftInterSect(stripPosition(stripCh), uncapped);       
    }
    inline Amg::Vector2D StripDesign::leftInterSect(const Amg::Vector2D& stripPos, bool uncapped) const {
        if (m_isFlipped) return leftInterSectFlipped(stripPos, uncapped);
        std::optional<double> lambda = Amg::intersect<2>(stripPos, m_stripDir, m_bottomLeft, m_dirBotEdge);
        if (!lambda) {
            ATH_MSG_WARNING("The strip "<<Amg::toString(stripPos,2)
                          <<" does not intersect the left edge "<<Amg::toString(m_bottomLeft, 2)
                          <<" + lambda "<<Amg::toString(m_dirBotEdge, 2));
            return Amg::Vector2D::Zero();
        }
        /// If the channel is a stereo channel && lamda is either smaller 0 or longer
        /// then the bottom edge, then it's a routed strip
        if (!uncapped && (m_hasStereo) && ( (*lambda) < 0. || (*lambda) > m_lenSlopEdge)) {
            const bool posIncl =  m_stripDir.x() >  0.; 
            const Amg::Vector2D& edgePos{posIncl ? m_bottomLeft : m_bottomRight};
            const Amg::Vector2D& edgeDir{posIncl ? m_dirLeftEdge : m_dirRightEdge};
            const std::optional<double> bottom_line = Amg::intersect<2>(edgePos, edgeDir, stripPos, m_stripDir);            
            return stripPos + bottom_line.value_or(0.)* m_stripDir;            
        }
        return m_bottomLeft + (*lambda) * m_dirBotEdge;
    }
    inline Amg::Vector2D StripDesign::leftInterSectFlipped(const Amg::Vector2D& stripPos, bool uncapped) const {
        std::optional<double> lambda = Amg::intersect<2>(stripPos, m_stripDir, m_topLeft, m_dirTopEdge);
        if (!lambda) {
            ATH_MSG_WARNING("The strip "<<Amg::toString(stripPos,2)
                          <<" does not intersect the left edge "<<Amg::toString(m_bottomLeft, 2)
                          <<" + lambda "<<Amg::toString(m_dirBotEdge, 2));
            return Amg::Vector2D::Zero();
        }
        /// The top edge of the trapezoid is actually shorter --> intersect the strip with the side
        if (!uncapped && ((*lambda)< 0. || (*lambda > 2.*longHalfHeight()))) {
            const Amg::Vector2D& edgePos{(*lambda)< 0. ? m_topRight : m_topLeft};
            const Amg::Vector2D& edgeDir{(*lambda)< 0. ? m_dirRightEdge : m_dirLeftEdge};
            std::optional<double> bottom_line = Amg::intersect<2>(edgePos, edgeDir, stripPos, m_stripDir);
            return stripPos + bottom_line.value_or(0) * m_stripDir;
        }
        return m_topLeft + lambda.value_or(0.) * m_dirTopEdge;
    }
    inline Amg::Vector2D StripDesign::rightInterSectFlipped(const Amg::Vector2D& stripPos, bool uncapped) const {
        std::optional<double> lambda = Amg::intersect<2>(stripPos, m_stripDir, m_bottomLeft, m_dirBotEdge);
        if (!lambda) {
            ATH_MSG_WARNING("The strip "<<Amg::toString(stripPos,2)
                          <<" does not intersect the right edge "<<Amg::toString(m_bottomLeft, 2)
                          <<" + lambda "<<Amg::toString(m_dirBotEdge, 2));
            return Amg::Vector2D::Zero();
        }
        /// The bottom edge of the trapezoid is actually shorter --> intersect the strip with the side
        if (!uncapped && ((*lambda)< 0. || (*lambda > 2.*shortHalfHeight()))) {
            const Amg::Vector2D& edgePos{(*lambda)< 0. ? m_bottomLeft : m_bottomRight};
            const Amg::Vector2D& edgeDir{(*lambda)< 0. ? m_dirLeftEdge : m_dirRightEdge};
            std::optional<double> bottom_line = Amg::intersect<2>(edgePos, edgeDir, stripPos, m_stripDir);
            return stripPos + bottom_line.value_or(0) * m_stripDir;
        }
        return m_bottomLeft + lambda.value_or(0.) * m_dirBotEdge;
        
    }

    //============================================================================
    inline double StripDesign::stripLength(int stripNumber) const {
        const int stripCh = (stripNumber - m_channelShift);
        if (stripCh < 0 ||  stripCh > numStrips()) {
            ATH_MSG_WARNING("center() -- Invalid strip number given "<<stripNumber<<" allowed range ["
                         <<m_channelShift<<";"<<numStrips()<<"]");
            return 0.;
        }
        const Amg::Vector2D strip{stripPosition(stripCh)};
        const Amg::Vector2D delta = rightInterSect(strip) - leftInterSect(strip);
        ATH_MSG_VERBOSE("Strip "<<stripNumber<<" right edge: "<<Amg::toString(rightInterSect(strip), 2)
                     <<" left edge: "<<Amg::toString(leftInterSect(strip),2)<<" length: "<<std::hypot(delta.x(), delta.y()));
        return std::hypot(delta.x(), delta.y());
    }
    inline Amg::Vector2D StripDesign::rightInterSect(int stripCh, bool uncapped) const {
        return rightInterSect(stripPosition(stripCh), uncapped);
    }
    inline Amg::Vector2D StripDesign::rightInterSect(const Amg::Vector2D& stripPos, bool uncapped) const {
        if (m_isFlipped) return rightInterSectFlipped(stripPos, uncapped);
        /// We expect lambda to be positive
        const std::optional<double> lambda = Amg::intersect<2>(stripPos, m_stripDir, m_topLeft, m_dirTopEdge);
        if (!lambda) {
            ATH_MSG_WARNING("The strip "<<Amg::toString(stripPos,2)
                          <<" does not intersect the top edge "<<Amg::toString(m_topRight, 2)
                          <<" + lambda "<<Amg::toString(m_dirTopEdge, 2));
            return Amg::Vector2D::Zero();
        }
        /// If the channel is a stereo channel && lamda is either smaller 0 or longer
        /// then the bottom edge, then it's a routed strip
        if (!uncapped && m_hasStereo && ( (*lambda) < 0  || (*lambda) > m_lenSlopEdge)) {
            const bool posIncl =  m_stripDir.x() >  0.;
            const Amg::Vector2D& edgePos{posIncl ? m_topRight : m_topLeft};
            const Amg::Vector2D& edgeDir{posIncl ? m_dirRightEdge : m_dirLeftEdge};
            const std::optional<double> top_line = Amg::intersect<2>(edgePos, edgeDir, stripPos, m_stripDir);
            return stripPos + top_line.value_or(0) * m_stripDir;            
       }
       return m_topLeft + (*lambda) * m_dirTopEdge;
    }
    inline Amg::Vector2D StripDesign::stripCenter(int stripCh) const {
       return 0.5 *(leftInterSect(stripCh) + rightInterSect(stripCh));      
    }

    inline std::optional<Amg::Vector2D> StripDesign::center(int stripNumber) const {
        const int stripCh = (stripNumber - m_channelShift);
        if (stripCh < 0 ||  stripCh > numStrips()) {
            ATH_MSG_WARNING("center() -- Invalid strip number given "<<stripNumber<<" allowed range ["
                         <<m_channelShift<<";"<<numStrips()<<"]");
            return std::nullopt;
        }
        return std::make_optional<Amg::Vector2D>(m_stereoRotMat * stripCenter(stripCh));
    }    
    inline std::optional<Amg::Vector2D> StripDesign::leftEdge(int stripNumber) const {
       const int stripCh = (stripNumber - m_channelShift);
       if (stripCh < 0 ||  stripCh > numStrips()) {
            ATH_MSG_WARNING("leftEdge() -- Invalid strip number given "<<stripNumber<<" allowed range ["
                          <<m_channelShift<<";"<<numStrips()<<"]");
            return std::nullopt;
       }
       return std::make_optional<Amg::Vector2D>(m_stereoRotMat * leftInterSect(stripCh));
    }
    inline std::optional<Amg::Vector2D> StripDesign::rightEdge(int stripNumber) const {
        const int stripCh = (stripNumber - m_channelShift);
        if (stripCh < 0 ||  stripCh > numStrips()) {
            ATH_MSG_WARNING("rightEdge() -- Invalid strip number given "<<stripNumber<<" allowed range ["
                          <<m_channelShift<<";"<<numStrips()<<"]");
            return std::nullopt;
        }
        return std::make_optional<Amg::Vector2D>(m_stereoRotMat * rightInterSect(stripCh));
    }
    inline double StripDesign::distanceToStrip(const Amg::Vector2D& pos, int stripNumber) const {
        std::optional<Amg::Vector2D> stripCent = center(stripNumber);
        if (!stripCent) return std::numeric_limits<double>::max();
        return (pos - (*stripCent)).x();
    }
    inline int StripDesign::stripNumber(const Amg::Vector2D& pos) const {
        const Amg::Vector2D posInNominal = m_nominalRotMat*pos;
        const double xMid = (posInNominal - m_firstStripPos).dot(m_stripNormal) / m_stripNormal.x();
        const int chNum = static_cast<int>(std::floor( xMid  / stripPitch()));
        if (chNum < 0 || chNum > numStrips()) {
            ATH_MSG_VERBOSE("Object "<<Amg::toString(pos)<<" is not covered by any strip."
                          <<" Virtual channel number: "<<chNum<<" max strips: "<<numStrips());
            return -1;
        }
        return chNum + m_channelShift;
    }
}
#endif