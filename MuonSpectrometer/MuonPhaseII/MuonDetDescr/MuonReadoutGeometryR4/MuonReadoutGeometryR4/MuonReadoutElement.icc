/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/
#ifndef MUONGEOMODELR4_MUONREADOUTELEMENT_ICC
#define MUONGEOMODELR4_MUONREADOUTELEMENT_ICC

namespace MuonGMR4 {

inline const GeoAlignableTransform* MuonReadoutElement::alignableTransform() const { return m_args.alignTransform; }
inline Identifier MuonReadoutElement::identify() const { return m_args.detElId; }
inline IdentifierHash MuonReadoutElement::identHash() const { return m_detElHash;}
inline std::string MuonReadoutElement::chamberDesign() const { return m_args.chambDesign; }
inline const Muon::IMuonIdHelperSvc* MuonReadoutElement::idHelperSvc() const { return m_idHelperSvc.get(); }
inline Muon::MuonStationIndex::ChIndex MuonReadoutElement::chamberIndex() const { return m_chIdx; }
inline int MuonReadoutElement::stationName() const { return m_stName; }
inline int MuonReadoutElement::stationEta() const { return m_stEta; }
inline int MuonReadoutElement::stationPhi() const { return m_stPhi; }

/// Returns the detector center (Which is the same as the detector center of the
/// first measurement layer)
inline Amg::Vector3D MuonReadoutElement::center(const ActsGeometryContext& ctx) const {
    return localToGlobalTrans(ctx).translation();
}
inline Amg::Vector3D MuonReadoutElement::center(const ActsGeometryContext& ctx,
                                                const Identifier& id) const {
    return localToGlobalTrans(ctx, id).translation();
}
inline Amg::Vector3D MuonReadoutElement::center(const ActsGeometryContext& ctx, 
                                                const IdentifierHash& hash) const {
    return localToGlobalTrans(ctx, hash).translation();
}
inline const Amg::Transform3D& MuonReadoutElement::globalToLocalTrans(const ActsGeometryContext& ctx, 
                                                                      const Identifier& id) const {
    return globalToLocalTrans(ctx, layerHash(id));
}
inline const Amg::Transform3D& MuonReadoutElement::localToGlobalTrans(const ActsGeometryContext& ctx, 
                                                                      const Identifier& id) const {
    return localToGlobalTrans(ctx, layerHash(id));
}

}  // namespace MuonGMR4
#endif
