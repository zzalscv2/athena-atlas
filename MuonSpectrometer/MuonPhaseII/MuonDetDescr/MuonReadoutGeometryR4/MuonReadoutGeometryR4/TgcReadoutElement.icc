/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/
#ifndef MUONREADOUTGEOMETRYR4_TGCREADOUTELEMENT_ICC
#define MUONREADOUTGEOMETRYR4_TGCREADOUTELEMENT_ICC


namespace MuonGMR4 {
inline double TgcReadoutElement::moduleWidthS() const { return 2.*m_pars.halfWidthShort; }
inline double TgcReadoutElement::moduleWidthL() const { return 2.*m_pars.halfWidthLong; }
inline double TgcReadoutElement::moduleHeight() const { return 2.*m_pars.halfHeight; }
inline double TgcReadoutElement::moduleThickness() const { return 2.*m_pars.halfThickness; }
inline double TgcReadoutElement::thickness() const { return moduleThickness(); }


inline IdentifierHash TgcReadoutElement::constructHash(unsigned int measCh,
                                                       unsigned int gasGap,
                                                       const bool isStrip) {
    /// Bit mask layout (measurment channel) | (gasGap [1-3]) | isStrip
    constexpr unsigned gapShift = 1;
    constexpr unsigned chanShift = 2 + gapShift;
    return IdentifierHash{measCh << chanShift | (gasGap -1) << gapShift | isStrip}; 
}
inline IdentifierHash TgcReadoutElement::measurementHash(const Identifier& measId) const {
    if (m_idHelper.elementID(measId) != m_idHelper.elementID(identify())) {
        ATH_MSG_WARNING("The measurement " << idHelperSvc()->toString(measId)
                        << " picks the wrong readout element " << idHelperSvc()->toStringDetEl(identify()));
    }
    return constructHash(m_idHelper.channel(measId),
                         m_idHelper.gasGap(measId),
                         m_idHelper.isStrip(measId));
}
inline IdentifierHash TgcReadoutElement::layerHash(const Identifier& measId) const {
    if (m_idHelper.elementID(measId) != m_idHelper.elementID(identify()) ) {
        ATH_MSG_WARNING("The measurement " << idHelperSvc()->toString(measId)
                        << " picks the wrong readout element " << idHelperSvc()->toStringDetEl(identify()));
    }
    return constructHash(0, m_idHelper.gasGap(measId),
                            m_idHelper.isStrip(measId));
}
inline IdentifierHash TgcReadoutElement::layerHash(const IdentifierHash& measHash) const {
    constexpr unsigned gapStripMask{(1<<2) | (1<<1) | 1};
    return IdentifierHash{static_cast<unsigned int>(measHash) & gapStripMask};
}
inline unsigned int TgcReadoutElement::channelNumber(const IdentifierHash& measHash) {
    constexpr unsigned int chanShift = 3;
    return static_cast<unsigned>(measHash) >> chanShift;
}
inline unsigned int TgcReadoutElement::gasGapNumber(const IdentifierHash& measHash) {
    /// The hash is (0/1/2/ | 0/1) -> 3 bits for the gasgap + 1 bit strip
    constexpr unsigned gapMask{(1<<1) | 1};
    constexpr unsigned stripBit{1};
    unsigned int unstripped = static_cast<unsigned>(measHash) >> stripBit;
    return (unstripped & gapMask) + 1;
}
inline bool TgcReadoutElement::isStrip(const IdentifierHash& measHash) {
    constexpr unsigned stripBit{1};
    return static_cast<unsigned>(measHash) & stripBit;
}

inline Identifier TgcReadoutElement::measurementId(const IdentifierHash& measHash) const {
    return m_idHelper.channelID(identify(), 
                                gasGapNumber(measHash),
                                isStrip(measHash),
                                channelNumber(measHash));
}
inline unsigned int TgcReadoutElement::nGasGaps() const { return m_pars.nGasGaps; }

inline unsigned int TgcReadoutElement::numStrips(unsigned int gasGap) const {
    const StripLayerPtr& sensor{sensorLayout(gasGap, true)};
    return sensor ? sensor->design().numStrips() : 0;
}
inline unsigned int TgcReadoutElement::numWireGangs(unsigned int gasGap) const {
    const StripLayerPtr& sensor{sensorLayout(gasGap, false)};
    return sensor ? sensor->design().numStrips() : 0;
}
inline const TgcReadoutElement::StripLayerPtr& TgcReadoutElement::sensorLayout(unsigned int gasGap, const bool isStrip) const {
    const IdentifierHash layHash{constructHash(0, gasGap, isStrip)};
    const unsigned layIdx{static_cast<unsigned>(layHash)};
    return m_pars.sensorLayouts.at(layIdx);
}
inline const WireGroupDesign& TgcReadoutElement::wireGangLayout(unsigned int gasGap) const {
    const StripLayerPtr& layerPtr = sensorLayout(gasGap, false);
    if (!layerPtr) {
        std::stringstream err_str{};
        err_str<<__FILE__<<":"<<__LINE__<<" Gas gap "<<gasGap<<" has no wire gangs in "
               <<idHelperSvc()->toStringDetEl(identify())<<std::endl;
        throw std::runtime_error(err_str.str());
    }
    return static_cast<const WireGroupDesign&>(layerPtr->design());
}
inline const RadialStripDesign& TgcReadoutElement::stripLayout(unsigned int gasGap)  const {
    const StripLayerPtr& layerPtr = sensorLayout(gasGap, true);
    if (!layerPtr) {
        std::stringstream err_str{};
        err_str<<__FILE__<<":"<<__LINE__<<" Gas gap "<<gasGap<<" has no strips in "
               <<idHelperSvc()->toStringDetEl(identify())<<std::endl;
        throw std::runtime_error(err_str.str());
    }
    return static_cast<const RadialStripDesign&>(layerPtr->design());
}
inline Amg::Vector3D TgcReadoutElement::channelPosition(const ActsGeometryContext& ctx, const Identifier& measId) const {
   return channelPosition(ctx, measurementHash(measId));
}

}  // namespace MuonGMR4
#endif
