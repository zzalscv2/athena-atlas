# Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
#
# Pre-config script to propagate variables to downstream projects
#

# Set the C++ standard to use.
set( CMAKE_CXX_STANDARD "@CMAKE_CXX_STANDARD@"
   CACHE STRING "C++ standard used for the build" )
set( CMAKE_CXX_EXTENSIONS "@CMAKE_CXX_EXTENSIONS@"
   CACHE STRING "(Dis)Allow the usage of C++ extensions" )

# HepMC3
set( HEPMC3_USE @HEPMC3_USE@ CACHE BOOL "Use HepMC3 in the project" )

# Use the -pthread flag for the build instead of the -lpthread linker option,
# if the main project was set up in that way.
set( THREADS_PREFER_PTHREAD_FLAG @THREADS_PREFER_PTHREAD_FLAG@ CACHE BOOL
   "Prefer using the -pthread compiler flag over -lpthread" )

# Set up the project's flake8 usage.
set( ATLAS_FLAKE8 @ATLAS_FLAKE8@
   CACHE STRING "Default flake8 command" )
set( ATLAS_PYTHON_CHECKER @ATLAS_PYTHON_CHECKER@
   CACHE STRING "Python checker command to run during Python module compilation" )

# Figure out whether to use QUIET in the following calls.
set( _quietFlag )
if( Athena_FIND_QUIETLY )
  set( _quietFlag QUIET )
endif()

# Set up the correct version of LCG. While AthenaExternals does this as well,
# we need to do it explicitly here, to make the following find_package calls
# find the packages correctly.
set( LCG_VERSION_POSTFIX @LCG_VERSION_POSTFIX@ )
find_package( LCG @LCG_VERSION_NUMBER@ REQUIRED EXACT ${_quietFlag} )

# Due to the way CMake handles propagation of targets to dependees,
# any "external" that is used through imported targets in the build need
# to be imported explicitly here.
find_package( Acts ${_quietFlag} COMPONENTS Core )
find_package( nlohmann_json ${_quietFlag} )
find_package( Qt5 ${_quietFlag} COMPONENTS Core OpenGL Gui PrintSupport Widgets
   Sql Network )
find_package( GTest ${_quietFlag} )
find_package( Geant4 ${_quietFlag} )

# Set the versions of the TDAQ projects:
set( TDAQ_PROJECT_NAME "@TDAQ_PROJECT_NAME@" CACHE STRING
   "Name of the tdaq project" )
set( TDAQ_VERSION "@TDAQ_VERSION@" CACHE STRING
   "The version of tdaq to use for the build" )
set( TDAQ_ATROOT "@TDAQ_ATROOT@" CACHE PATH
   "The directory to pick up tdaq from" )

set( TDAQ-COMMON_VERSION "@TDAQ-COMMON_VERSION@" CACHE STRING
   "The version of tdaq-common to use for the build" )
set( TDAQ-COMMON_ATROOT "@TDAQ-COMMON_ATROOT@" CACHE PATH
   "The directory to pick up tdaq-common from" )

# Find tdaq-common, mainly to have packages find COOL/CORAL.
find_package( tdaq-common ${_quietFlag} )

# Clean up.
unset( _quietFlag )
