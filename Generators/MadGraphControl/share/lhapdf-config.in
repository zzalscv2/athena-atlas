#! /usr/bin/env bash
## -*- sh -*-   
## lhapdf-config for MadGraph use in Athena
## this custom config is required to find lhapdf installation dir, version, and the actual pdf set data from env variables
## in the default configuration this is hardcoded

prefix=$LHAPDF_INSTAL_PATH
datapath=$(echo $LHAPDF_DATA_PATH | cut -d':' -f1)
exec_prefix=${prefix}
version=$LHAPDFVER

#find boost
boost=@Boost_INCLUDE_PATH@
if [ -z $boost ]
then
    echo "WARNING: lhapdf-config could not find boost headers"
fi

if [[ $# -eq 0 || -n $( echo $* | egrep -- "--help|-h" ) ]]; then
    echo "lhapdf-config: configuration tool for the LHAPDF"
    echo "               parton density function evolution library"
    echo "               http://projects.hepforge.org/lhapdf/"
    echo
    echo "Usage: lhapdf-config [options]"
    echo "Options:"
    echo "  --help | -h   : show this help message"
    echo "  --prefix      : show the installation prefix (cf. autoconf)"
    echo "  --incdir      : show the path to the LHAPDF C++ header directory"
    echo "  --libdir      : show the path to the LHAPDF library directory"
    echo "  --datadir     : show the path to the LHAPDF data directory"
    echo
    echo "  --cflags      : get compiler flags (aka --cppflags|--cxxflags)"
    echo "  --libs        : get linker flags (aka --ldflags)"
    echo
    echo "  --version     : return LHAPDF release version number"
fi

OUT=""

tmp=$( echo "$*" | egrep -- '--\<prefix\>')
test -n "$tmp" && OUT="$OUT $prefix"

tmp=$( echo "$*" | egrep -- '--\<incdir\>')
test -n "$tmp" && OUT="$OUT ${prefix}/include"

tmp=$( echo "$*" | egrep -- '--\<cflags|cppflags|cxxflags\>')
test -n "$tmp" && OUT="$OUT -I${prefix}/include -I$boost"

tmp=$( echo "$*" | egrep -- '--\<libdir\>')
test -n "$tmp" && OUT="$OUT ${exec_prefix}/lib"

tmp=$( echo "$*" | egrep -- '--\<libs|ldflags\>')
test -n "$tmp" && OUT="$OUT -L${exec_prefix}/lib -lLHAPDF"

tmp=$( echo "$*" | egrep -- '--\<datadir\>|--\<datarootdir\>')
test -n "$tmp" && OUT="$OUT $datapath"

tmp=$( echo "$*" | egrep -- '--\<version\>')
test -n "$tmp" && OUT="$OUT $version"

echo $OUT
