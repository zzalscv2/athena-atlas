// Dear emacs, this is -*- c++ -*-
/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/
#ifndef XAODCORE_AUXINFOBASE_ICC
#define XAODCORE_AUXINFOBASE_ICC

// System include(s):
#include <iostream>

// EDM include(s):
#include "AthContainers/AuxTypeRegistry.h"

// Local include(s):
#include "xAODCore/tools/AuxPersInfo.h"
#include "xAODCore/tools/AuxVariable.h"

namespace xAOD {

   template< typename T >
   AuxInfoBase::auxid_t
   AuxInfoBase::getAuxID( const std::string& name,
                          T& /*info*/,
                          SG::AuxTypeRegistry::Flags flags ) {

      return SG::AuxTypeRegistry::instance().template getAuxID< T >( name, "",
                                                                     flags );
   }

   /// The user is expected to use this function inside the constructor of
   /// the derived class.
   ///
   /// @param auxid The auxiliary ID to use for the variable
   /// @param name The name of the variable. Same as the C++ variable's name.
   /// @param vec A reference to the auxiliary variable inside the object
   template< typename T >
   void AuxInfoBase::regAuxVar( const auxid_t auxid, const std::string& name,
                                T& info ) {

      // Make sure that the internal vector is big enough:
      if( m_vecs.size() <= auxid ) {
         m_vecs.resize( auxid + 1 );
      }

      // Check if this variable name was already registered:
      if( m_vecs[ auxid ] ) {
         std::cout << "WARNING xAOD::AuxInfoBase::regAuxVar "
                   << "Re-registering variable with name \""
                   << name.c_str() << "\"" << std::endl;
         delete m_vecs[ auxid ];
      }

      // Register the variable:
      m_vecs[ auxid ] = new AuxPersInfo< T >( auxid, info );

      // Remember that we are now handling this variable:
      m_auxids.insert( auxid );

      return;
   }

} // namespace xAOD

#endif // XAODCORE_AUXINFOBASE_ICC
