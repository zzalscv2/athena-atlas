/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/

/**
 * @file SiDetectorElement.icc
 **/

namespace InDetDD {

  ///////////////////////////////////////////////////////////////////
  // Inline methods:
  ///////////////////////////////////////////////////////////////////

  inline Trk::DetectorElemType SiDetectorElement::detectorType() const{
    return Trk::DetectorElemType::Silicon;
  }
  inline void SiDetectorElement::setNextInEta(const SiDetectorElement* element)
  {
    m_nextInEta = element;
  }

  inline void SiDetectorElement::setPrevInEta(const SiDetectorElement* element)
  {
    m_prevInEta = element;
  }

  inline void SiDetectorElement::setNextInPhi(const SiDetectorElement* element)
  {
    m_nextInPhi = element;
  }

  inline void SiDetectorElement::setPrevInPhi(const SiDetectorElement* element)
  {
    m_prevInPhi = element;
  }

  inline void SiDetectorElement::setOtherSide(const SiDetectorElement* element) // For SCT only
  {
    m_otherSide = element;
  }

  inline const SiDetectorElement * SiDetectorElement::nextInEta() const
  {
    return m_nextInEta;
  }

  inline const SiDetectorElement * SiDetectorElement::prevInEta() const
  {
    return m_prevInEta;
  }

  inline const SiDetectorElement * SiDetectorElement::nextInPhi() const
  {
    return m_nextInPhi;
  }

  inline const SiDetectorElement * SiDetectorElement::prevInPhi() const
  {
    return m_prevInPhi;
  }

  inline const SiDetectorElement * SiDetectorElement::otherSide() const
  {
    return m_otherSide;
  }

  inline bool SiDetectorElement::isPixel() const {
    return m_isPixel;
  }

  inline bool SiDetectorElement::isSCT() const {
    return m_isSCT;
  }

  inline bool SiDetectorElement::isPLR() const {
    return m_isPLR;
  }

  inline bool SiDetectorElement::isDBM() const {
    return m_isDBM;
  }

  inline bool SiDetectorElement::isBarrel() const {
    return m_isBarrel;
  }

  inline bool SiDetectorElement::isEndcap() const
  {
    return (!isBarrel() && !isDBM());
  }

  inline const SiDetectorDesign& SiDetectorElement::design() const
  {
    return *m_siDesign;
  }

  inline double SiDetectorElement::phiPitch() const
  {
    return m_siDesign->phiPitch();
  }

  inline double SiDetectorElement::phiPitch(const Amg::Vector2D& localPosition) const
  {
    return m_siDesign->phiPitch(localPosition);
  }

  inline InDetDD::CarrierType SiDetectorElement::carrierType() const
  {
    return m_siDesign->carrierType();
  }

  inline bool SiDetectorElement::swapPhiReadoutDirection() const
  {
    // equivalent to (m_siDesign->swapHitPhiReadoutDirection() xor !m_phiDirection)
    bool dir = this->phiDirection();
    return ((!m_siDesign->swapHitPhiReadoutDirection() && !dir)
          || (m_siDesign->swapHitPhiReadoutDirection() &&  dir));
  }

  inline bool SiDetectorElement::swapEtaReadoutDirection() const
  {
    bool dir = this->etaDirection();
    // equivalent to (m_siDesign->swapHitEtaReadoutDirection() xor !m_etaDirection)
    return ((!m_siDesign->swapHitEtaReadoutDirection() && !dir)
          || (m_siDesign->swapHitEtaReadoutDirection() &&  dir));
  }

  inline SiCellId SiDetectorElement::gangedCell(const SiCellId& cellId) const
  {
    return  m_siDesign->gangedCell(cellId);
  }

  inline MsgStream& SiDetectorElement::msg(MSG::Level lvl) const
  {
    return m_commonItems->msg(lvl);
  }

  inline bool SiDetectorElement::msgLvl(MSG::Level lvl) const
  {
    return m_commonItems->msgLvl(lvl);
  }



} // namespace InDetDD
