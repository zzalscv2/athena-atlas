/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/
namespace Trk {

template <size_t N>
LocalParameters::LocalParameters(
    const std::array<Trk::DefinedParameter,N>& parms)
    : Amg::VectorX(N), m_parameterkey(0) {
  static_assert(N > 0 && N <= 5, "Number of params required to be >0 and <=5");
  for (size_t idx = 0; idx < N; ++idx) {
    Amg::VectorX::operator[](idx) = parms[idx].first;
    m_parameterkey |= 1 << int(parms[idx].second);
  }
}

inline LocalParameters*
LocalParameters::clone() const
{
  return new LocalParameters(*this);
}

inline const Amg::VectorX&
LocalParameters::asVector() const
{
  return (*this);
}

inline int
LocalParameters::dimension() const
{
  return Amg::VectorX::rows();
}

inline int
LocalParameters::parameterKey() const
{
  return m_parameterkey;
}

inline bool
LocalParameters::contains(ParamDefs par) const
{
  return (m_parameterkey & (1 << int(par)));
}

inline double
LocalParameters::get(ParamDefs par) const
{
  return (*this)[par];
}

inline double
LocalParameters::get(ParamDefs par)
{
  return (*this)[par];
}
}
