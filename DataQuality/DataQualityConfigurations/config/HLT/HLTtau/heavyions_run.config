######################################################################
# file  heav_ions.config [August 2023]
######################################################################

#######################
# HLTtau
#######################


#######################
# Histogram Assessments
#######################

#### Run 3 histograms -- example 

dir HLT {
  dir TauMon {
     display        = StatBox
     algorithm      = HLT_Tau_Chi2NDF

     dir HLT_Efficiency {
        dir (?P<hltchain>HLT_.*) {
           regex = 1

           dir HLT_Efficiency_1P {      
              hist EffHLT.* {
                  description = "HLT Efficiency wrt Offline"
                  output = HLT/TRTAU/Shifter/HLT_Efficiency/HLT_Efficiency_1P/${hltchain}             
              }
           }
           dir HLT_Efficiency_3P {      
              hist EffHLT.* {
                  description = "HLT Efficiency wrt Offline"
                  output = HLT/TRTAU/Shifter/HLT_Efficiency/HLT_Efficiency_3P/${hltchain}             
              }
           }
        }
     }

     dir DiTauHLT_Efficiency {
        dir (?P<ditauchains>HLT_.*) {
           regex = 1
           dir DiTauHLT_Efficiency {
             hist EffDiTau.* {
               description = "DiTau Efficiency wrt Offline"
               output    = HLT/TRTAU/Shifter/DiTauHLT_Efficiency/${ditauchains}
             }
           }
        }
     }

     dir TAndPHLT_Efficiency {
        dir (?P<tandpchains>HLT_.*) {
           regex = 1
           dir TAndPHLT_Efficiency {
             hist EffTAndPHLT.* {
               description = "Tag and Probe chains Efficiency wrt Offline"
               output    = HLT/TRTAU/Shifter/TAndPHLT_Efficiency/${tandpchains}
             }
           }
        }
     }

     dir L1_Efficiency {
        dir (?P<l1item>L1.*) {
           regex = 1
           dir L1_Efficiency_1P {
             hist EffL1.* {
               description = "L1 Efficiency wrt Offline"
               output      = HLT/TRTAU/Expert/L1_Efficiency/L1_Efficiency_1P/${l1item}
             }
           }
           dir L1_Efficiency_3P {
             hist EffL1.* {
               description = "L1 Efficiency wrt Offline"
               output      = HLT/TRTAU/Expert/L1_Efficiency/L1_Efficiency_3P/${l1item}
             }
           }
        }
     }

     algorithm = TAU_HistKolmogorovTest_MaxDist_loose

     dir basicVars {
        dir (?P<tauchains>HLT_.*) {
           regex = 1 
           dir HLT_0P {
             hist h.* {
               output    = HLT/TRTAU/Expert/basicVars/HLT_0P/${tauchains}
             }
           }
           dir HLT_1P {
             hist h.* {
               output    = HLT/TRTAU/Expert/basicVars/HLT_1P/${tauchains}
             }
           }
           dir HLT_MP {
             hist h.* {
               output    = HLT/TRTAU/Expert/basicVars/HLT_MP/${tauchains}
             }
           }
        }
     }
     dir RNN {
        dir InputCluster {
           dir (?P<rnnchains>HLT_.*RNN.*) {
             regex = 1
             dir HLT {
                hist cluster_.* {
                  description = "RNN Cluster input variables"
                  output    = HLT/TRTAU/Expert/RNN/InputCluster/HLT/${rnnchains}
                }
             }
           }
        }
        dir InputScalar_0P {
           dir (?P<rnnchains0>HLT_.*RNN.*) {
              regex = 1
              dir HLT {
                hist absipSigLeadTrk {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist centFrac {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist dRmax {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist emPOverTrkSysP {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist etOverPtLeadTrk {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist mEflowApprox {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist ptDetectorAxis {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist ptRatioEflowApprox {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
                hist sumPtTrkFrac {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_0P/HLT/${rnnchains0}
                }
             }
           }
        }
        dir InputScalar_1P {
           dir (?P<rnnchains1>HLT_.*RNN.*) {
              regex = 1
              dir HLT {
                hist absipSigLeadTrk {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist centFrac {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist dRmax {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist emPOverTrkSysP {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist etOverPtLeadTrk {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist mEflowApprox {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist ptDetectorAxis {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist ptRatioEflowApprox {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
                hist sumPtTrkFrac {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_1P/HLT/${rnnchains1}
                }
             }
           }
        }
        dir InputScalar_MP {
           dir (?P<rnnchains3>HLT_.*RNN.*) {
              regex = 1
              dir HLT {
                hist absipSigLeadTrk {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist centFrac {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist dRmax {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist emPOverTrkSysP {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist etOverPtLeadTrk {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist mEflowApprox {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist ptDetectorAxis {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist ptRatioEflowApprox {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
                hist sumPtTrkFrac {
                  output    = HLT/TRTAU/Expert/RNN/InputScalar_MP/HLT/${rnnchains3}
                }
             }
           }
        }
        dir InputTrack {
           dir (?P<rnnchains4>HLT_.*RNN.*) {
             regex = 1
             dir HLT {
                hist track.* {
                  description = "RNN ID Track input variables"
                  output    = HLT/TRTAU/Expert/RNN/InputTrack/HLT/${rnnchains4}
                }
             }
           }
        }
     }
     dir L1 {
        dir (?P<l1itemvars>L1.*) {
           regex = 1
           hist L1.* {
               description = "L1 variables"
               output    = HLT/TRTAU/Expert/L1/${l1itemvars}
           }
        }
     }
     dir DiTauVars {
        dir (?P<ditauvars>HLT_.*) {
           regex = 1
           hist Eta {
               output    = HLT/TRTAU/Expert/DiTauVars/${ditauvars}
           }
           hist M {
               output    = HLT/TRTAU/Expert/DiTauVars/${ditauvars}
           }
           hist Phi {
               output    = HLT/TRTAU/Expert/DiTauVars/${ditauvars}
           }
           hist Pt {
               output    = HLT/TRTAU/Expert/DiTauVars/${ditauvars}
           }
           hist h.* {
               output    = HLT/TRTAU/Expert/DiTauVars/${ditauvars}
           }
        }
     }
     dir TAndPVars {
        dir (?P<tandpvars>HLT_.*) {
           regex = 1
           hist Eta {
               output    = HLT/TRTAU/Expert/TAndPVars/${tandpvars}
           }
           hist M {
               output    = HLT/TRTAU/Expert/TAndPVars/${tandpvars}
           }
           hist Phi {
               output    = HLT/TRTAU/Expert/TAndPVars/${tandpvars}
           }
           hist Pt {
               output    = HLT/TRTAU/Expert/TAndPVars/${tandpvars}
           }
           hist dPt {
               output    = HLT/TRTAU/Expert/TAndPVars/${tandpvars}
           }
           hist h.* {
               output    = HLT/TRTAU/Expert/TAndPVars/${tandpvars}
           }
        }
     }
   } #end dir TauMon
} #end dir HLT


#######################
# Output
#######################


output top_level {
  output HLT {

    #### Run 3 output folders -- example
       output TRTAU {
          output Expert {
            output L1_Efficiency {
               output L1_Efficiency_1P {
                  output ${l1item} {
                  }
               }
               output L1_Efficiency_3P {
                  output ${l1item} {
                  }
               }
            }
            output basicVars {
               output HLT_0P {
                  output ${tauchains} {
                  }
               }
               output HLT_1P {
                  output ${tauchains} {
                  }
               }
               output HLT_MP {
                  output ${tauchains} {
                  }
               }
            }
            output RNN {
               output InputScalar_0P {
                  output HLT {
                     output ${rnnchains0} {
                     }
                  }
               }
               output InputScalar_1P {
                  output HLT {
                     output ${rnnchains1} {
                     }
                  }
               }
               output InputScalar_MP {
                  output HLT {
                     output ${rnnchains3} {
                     }
                  }
               }
               output InputCluster {
                  output HLT {
                     output ${rnnchains} {
                     }
                  }
               }
               output InputTrack {
                  output HLT {
                     output ${rnnchains4} {
                     }
                  }
               }
            }
            output L1 {
               output ${l1itemvars} {
               }
            }
            output DiTauVars {
               output ${ditauvars} {
               }
            }
            output TAndPVars {
               output ${tandpvars} {
               }
            }
          }
	  output Shifter {
            output HLT_Efficiency {
               output HLT_Efficiency_1P {
                  output ${hltchain} { 
                  }
               }
               output HLT_Efficiency_3P {
                  output ${hltchain} { 
                  }
               }
            }
            output DiTauHLT_Efficiency {
               output ${ditauchains} {
               }
            }
            output TAndPHLT_Efficiency {
               output ${tandpchains} {
               }
            }
          }
       } # End outputTRTAU
 } #end output HLT
} #end output top_level


##############
# Algorithms
##############


algorithm HLT_TAU_Histogram_Not_Empty&GatherData {
  libname = libdqm_algorithms.so
  name =  HLT_TAU_Histogram_Not_Empty&GatherData
  reference = stream=physics_Main:CentrallyManagedReferences_TriggerMain;stream=physics_HardProbes:CentrallyManagedReferences_TriggerHardProbes;stream=physics_UPC:CentrallyManagedReferences_TriggerUPC;CentrallyManagedReferences_Trigger
}

compositeAlgorithm HLT_TAU_Histogram_Not_Empty&GatherData {
  subalgs = GatherData,Histogram_Not_Empty
  libnames = libdqm_algorithms.so
}

algorithm TAU_HistKolmogorovTest_MaxDist {
  libname = libdqm_algorithms.so
  name = KolmogorovTest_MaxDist
  thresholds = TAU_HistKolmogorovTest_MaxDist_Threshold
  MinStat = -1
  reference = stream=physics_Main:CentrallyManagedReferences_TriggerMain;stream=physics_HardProbes:CentrallyManagedReferences_TriggerHardProbes;stream=physics_UPC:CentrallyManagedReferences_TriggerUPC;CentrallyManagedReferences_Trigger
}

algorithm TAU_HistKolmogorovTest_MaxDist_loose {
  libname = libdqm_algorithms.so
  name = KolmogorovTest_MaxDist
  thresholds = TAU_HistKolmogorovTest_MaxDist_Threshold_loose
  MinStat = -1
  reference = stream=physics_Main:CentrallyManagedReferences_TriggerMain;stream=physics_HardProbes:CentrallyManagedReferences_TriggerHardProbes;stream=physics_UPC:CentrallyManagedReferences_TriggerUPC;CentrallyManagedReferences_Trigger
}

compositeAlgorithm GatherData&Chi2Test {
  libnames = libdqm_algorithms.so
  subalgs = GatherData,Chi2Test_Chi2_per_NDF
}

algorithm HLT_Tau_Chi2NDF {
  name = GatherData&Chi2Test

  thresholds = Chi2_thresh

  algorithm Loose {
    thresholds = Chi2_thresh/Loose
  }

  algorithm veryLoose {
    thresholds = Chi2_thresh/veryLoose
  }

  algorithm noMatch {
    thresholds = Chi2_thresh/noMatch
  }
  reference = stream=physics_Main:CentrallyManagedReferences_TriggerMain;stream=physics_HardProbes:CentrallyManagedReferences_TriggerHardProbes;stream=physics_UPC:CentrallyManagedReferences_TriggerUPC;CentrallyManagedReferences_Trigger
  MinStat = 250
}


###############
# Thresholds
###############

thresholds TAU_HistKolmogorovTest_MaxDist_Threshold {
  limits MaxDist {
    warning = 0.4
    error = 0.7
  }
}

thresholds TAU_HistKolmogorovTest_MaxDist_Threshold_loose {
  limits MaxDist {
    warning = 25.0
    error = 28.0
  }
}

thresholds Chi2_thresh   {

  limits Chi2_per_NDF {
    warning = 3.
    error = 5.
  }

  thresholds Loose {
    limits Chi2_per_NDF {
      warning = 5. 
      error = 8.
    }
  }
  
  thresholds veryLoose {
    limits Chi2_per_NDF {
      warning = 8. 
      error = 12.
    }
  }

  thresholds noMatch {
    limits Chi2_per_NDF {
      warning = 100. 
      error = 120.
    }
  }

}

###############################################
# Local references for last days of 2018 pp run
###############################################

reference HLT_TauTrigger_ExpressReference {
  location = /eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/,root://eosatlas.cern.ch//eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/
  file = data18_13TeV.00362661.express_express.merge.HIST.f993_h325._0001.1
  path = run_362661
  name = same_name
  info = Run 362661, express_express
}

reference HLT_TauTrigger_MainReference {
  location = /eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/,root://eosatlas.cern.ch//eos/atlas/atlascerngroupdisk/data-dqm/references/Collisions/
  file = data18_13TeV.00362661.physics_Main.merge.HIST.f993_h325._0001.1
  path = run_362661
  name = same_name
  info = Run 362661, physics_Main
}
