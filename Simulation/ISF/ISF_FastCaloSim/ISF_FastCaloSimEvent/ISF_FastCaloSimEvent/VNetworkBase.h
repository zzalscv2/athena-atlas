/**
 * Copyright (C) 2002-2024 CERN for the benefit of the ATLAS collaboration
 *
 * Abstract base class for Neural networks.
 * Intially aimed at replacing instances of an lwtnn network
 * with a network that could be either lwtnn or ONNX,
 * so it is an interface which mirrors that of lwtnn graphs.
 * At least 3 derived classes are avaliable;
 *
 *   - TFCSSimpleLWTNNHandler; Designed to wrap a lwtnn neural network
 *   - TFCSGANLWTNNHandler; Designed to wrap a lwtnn graph network
 *   - TFCSONNXHandler; Designed to wrap an ONNX network
 *
 * The TFCSNetworkFactory::Create function has this class as its return type
 * so that it can make a run-time decision about which derived class
 * to use, based on the file or data presented.
 **/
#ifndef VNETWORKBASE_H
#define VNETWORKBASE_H

// For conversion to ostream
#include <iostream>
#include <map>

// For reading and writing
#include "TFile.h"
#include "TTree.h"

// For messaging
#include "ISF_FastCaloSimEvent/MLogging.h"
using ISF_FCS::MLogging;

/**
 * @brief A template defining the interface to a neural network.
 *
 * Has various subclasses to cover differing network
 * libraries and save formats.
 **/
class VNetworkBase : public MLogging {
public:
  /**
   * @brief VNetworkBase default constructor.
   *
   * For use in streamers.
   **/
  VNetworkBase();

  // explicit = Don't let this do implicit type conversion
  /**
   * @brief VNetworkBase constructor.
   *
   * Only saves inputFile to m_inputFile;
   * Inherting classes should call setupPersistedVariables
   * and setupNet in constructor;
   *
   * @param inputFile file-path on disk (with file name) of a readable
   *                  file containing a description of the network to
   *                  be constructed or the content of the file.
   **/
  explicit VNetworkBase(const std::string &inputFile);

  /**
   * @brief VNetworkBase copy constructor.
   *
   * Does not call setupPersistedVariables or setupNet
   * but will pass on m_inputFile.
   * Inherting classes should do whatever they need to move the variables
   * created in the setup functions.
   *
   * @param copy_from existing network that we are copying
   **/
  VNetworkBase(const VNetworkBase &copy_from);

  // virtual destructor, to ensure that it is always called, even
  // when a base class is deleted via a pointer to a derived class
  virtual ~VNetworkBase();

  // same as for lwtnn
  /**
   * @brief Format for network inputs.
   *
   * The doubles are the values to be passed into the network.
   * Strings in the outer map identify the input node, which
   * must corrispond to the names of the nodes as read from the
   * description of the network found by the constructor.
   * Strings in the inner map identify the part of the input node,
   * for some networks these must be simple integers, in string form,
   * as parts of nodes do not always have the ability to carry
   * real string labels.
   **/
  typedef std::map<std::string, std::map<std::string, double>> NetworkInputs;
  /**
   * @brief Format for network outputs.
   *
   * The doubles are the values generated by the network.
   * Strings identify which node this value came from,
   * and when nodes have multiple values, are suffixed with
   * a number to indicate which part of the node they came from.
   * So in multi-value nodes the format becomes "<node_name>_<part_n>"
   **/
  typedef std::map<std::string, double> NetworkOutputs;

  /**
   * @brief String representation of network inputs
   *
   * Create a string that summarises a set of network inputs.
   * Gives basic dimensions plus a few values, up to the maxValues
   *
   * @param inputs     values to be evaluated by the network
   * @param maxValues  maximum number of values to include in the representaiton
   * @return           string represetning the inputs
   **/
  static std::string representNetworkInputs(NetworkInputs const &inputs,
                                            int maxValues = 3);

  /**
   * @brief String representation of network outputs
   *
   * Create a string that summarises a set of network outputs.
   * Gives basic dimensions plus a few values, up to the maxValues
   *
   * @param outputs    output of the network
   * @param maxValues  maximum number of values to include in the representaiton
   * @return           string represetning the outputs
   **/
  static std::string representNetworkOutputs(NetworkOutputs const &outputs,
                                             int maxValues = 3);

  // pure virtual, derived classes must impement this
  /**
   * @brief Function to pass values to the network.
   *
   * This function hides variations in the formated needed
   * by different network libraries, providing a uniform input
   * and output type.
   *
   * @param inputs  values to be evaluated by the network
   * @return        the output of the network
   * @see VNetworkBase::NetworkInputs
   * @see VNetworkBase::NetworkOutputs
   **/
  virtual NetworkOutputs compute(NetworkInputs const &inputs) const = 0;

  // Conversion to ostream
  // It's not possible to have a virtual friend function
  // so instead, have a friend function that calls a virtual protected method
  /**
   * @brief Put-to operator to facilitate printing.
   *
   * It is useful to be able to display a reasonable representation of
   * a network for debugging.
   * This can be altered by subclasses by changing the protected
   * print function of this class.
   **/
  friend std::ostream &operator<<(std::ostream &strm,
                                  const VNetworkBase &vNetworkBase) {
    vNetworkBase.print(strm);
    return strm;
  }

  /**
   * @brief Save the network to a TTree.
   *
   * All data required to recreate the network object is saved
   * into a TTree. The format is not specified.
   *
   * @param tree  The tree to save inside.
   **/
  virtual void writeNetToTTree(TTree &tree) = 0;

  /**
   * @brief Default name for the TTree to save in.
   **/
  inline static const std::string m_defaultTreeName = "onnxruntime_session";

  /**
   * @brief Save the network to a TTree.
   *
   * All data required to recreate the network object is saved
   * into a TTree. The format is not specified.
   *
   * @param root_file  The file to save inside.
   * @param tree_name  The name of the TTree to save inside.
   **/
  void writeNetToTTree(TFile &root_file,
                       std::string const &tree_name = m_defaultTreeName);

  /**
   * @brief Save the network to a TTree.
   *
   * All data required to recreate the network object is saved
   * into a TTree. The format is not specified.
   *
   * @param root_name  The path of the file to save inside.
   * @param tree_name  The name of the TTree to save inside.
   **/
  void writeNetToTTree(std::string const &root_name,
                       std::string const &tree_name = m_defaultTreeName);

  /**
   * @brief List the names of the outputs.
   *
   * Outputs are stored in an NetworkOutputs object
   * which is indexed by strings. This function
   * returns the list of all strings that will index the outputs.
   *
   **/
  virtual std::vector<std::string> getOutputLayers() const = 0;

  /**
   * @brief Check if a string is the path of a file on disk.
   *
   * Determines if a string corrisponds to tha path of a file
   * that can be read on the disk.
   *
   * @param inputFile  name of the pottential file
   * @return           is it a readable file on disk
   **/
  static bool isFile(std::string const &inputFile);

  /**
   * @brief Check if the argument inputFile is the path of a file on disk.
   *
   * Determines if the string that was passed to the constructor as
   * inputFile corrisponds to tha path of a file
   * that can be read on the disk.
   *
   * @return           is it a readable file on disk
   **/
  bool isFile() const;

  /**
   * @brief Get rid of any memory objects that arn't needed to run the net.
   *
   * Minimise memory usage by deleting any inputs that are
   * no longer required to run the compute function.
   * May prevent the net from being saved.
   *
   **/
  virtual void deleteAllButNet() = 0;

protected:
  /**
   * @brief Path to the file describing the network, including filename.
   **/
  std::string m_inputFile;

  /**
   * @brief Perform actions that prep data to create the net
   *
   * Will be called in the class constructor
   * before calling setupNet, but not in the streamer.
   * It sets any variables that the sreamer would persist
   * when saving or loading to file.
   *
   **/
  virtual void setupPersistedVariables() = 0;

  /**
   * @brief Perform actions that prepare network for use.
   *
   * Will be called in the streamer or class constructor
   * after the inputs have been set (either automaically by the
   * streamer or by setupPersistedVariables in the constructor).
   * Does not delete any resources used.
   *
   **/
  virtual void setupNet() = 0;

  /**
   * @brief Write a short description of this net to the string stream.
   *
   * Intended to facilitate the put-to operator, allowing subclasses
   * to change how this object is displayed.
   *
   * @param strm  output parameter, to which the description will be written.
   **/
  virtual void print(std::ostream &strm) const;

  /**
   * @brief Check if a string is possibly a root file path.
   *
   * Just checks if the string ends in .root
   * as there are almost no reliable rules for file paths.
   *
   * @param inputFile  name of the pottential file
   *                   if blank, m_inputFile is used.
   * @return           is it the path of a root file
   **/
  bool isRootFile(std::string const &filename = "") const;

  /**
   * @brief Remove any common prefix from the outputs.
   *
   * @param outputs    The outputs, changed in place.
   **/
  void removePrefixes(NetworkOutputs &outputs) const;

  /**
   * @brief Remove any common prefix from the outputs.
   *
   * @param outputs    The output names, changed in place.
   **/
  void removePrefixes(std::vector<std::string> &output_names) const;

private:
  // Suppling a ClassDef for writing to file.
  ClassDef(VNetworkBase, 1);
};

#endif
