/**
 * Copyright (C) 2002-2024 CERN for the benefit of the ATLAS collaboration
 *
 * Abstract base class for LWTNN Neural networks.
 * Inherits from a generic abstract network class,
 * and defined aspects common to all LWTNN networks.
 *
 * In particular, this derived virtual class handles
 * saving, memory managment and printing.
 *
 * To classes derive from this class;
 *   - TFCSSimpleLWTNNHandler; Designed to wrap a lwtnn neural network
 *   - TFCSGANLWTNNHandler; Designed to wrap a lwtnn graph network
 *
 **/
#ifndef VNETWORKLWTNN_H
#define VNETWORKLWTNN_H
// inherits from
#include "VNetworkBase.h"

// For reading and writing
#include "TTree.h"
#include <sstream>

/**
 * @brief A template defining the interface to a lwtnn network.
 *
 * Has various subclasses to cover the various formats of lwtnn
 * networks.
 **/
class VNetworkLWTNN : public VNetworkBase {
public:
  // Not sure if this is needed
  using VNetworkBase::VNetworkBase;

  /**
   * @brief VNetworkLWTNN copy constructor.
   *
   * Will copy the variables that would be generated by
   * setupPersistedVariables and setupNet.
   * Will fail if deleteAllButNet has already been called.
   *
   * @param copy_from existing network that we are copying
   **/
  VNetworkLWTNN(const VNetworkLWTNN &copy_from);

  // Ensure we inherit methods of the same name with different signatures
  using VNetworkBase::writeNetToTTree;

  /**
   * @brief Save the network to a TTree.
   *
   * All data required to recreate the network object is saved
   * into a TTree. The format is not specified.
   *
   * @param tree  The tree to save inside.
   **/
  void writeNetToTTree(TTree &tree) override;

  // virtual destructor, to ensure that it is always called, even
  // when a base class is deleted via a pointer to a derived class
  virtual ~VNetworkLWTNN();

  /**
   * @brief Get rid of any memory objects that arn't needed to run the net.
   *
   * Minimise memory usage by deleting nay inputs that are
   * no longer required to run the compute function.
   * Will prevent the net from being saved, if you need
   * to call writeNetToTTree that must happen before this is called.
   *
   **/
  void deleteAllButNet() override;

protected:
  /**
   * @brief String containing json input file
   *
   * Is needed to save the network with writeNetToTTree
   * but not needed to run the network with compute.
   * Is eraised by deleteAllButNet
   * Should be persisted.
   **/
  std::string m_json;

  /**
   * @brief Write a short description of this net to the string stream.
   *
   * Outputs a printable name, which maybe a file name, or
   * a note specifying that the file has been provided from memory.
   *
   * @param strm  output parameter, to which the description will be written.
   **/
  virtual void print(std::ostream &strm) const override;

  /**
   * @brief Perform actions that prep data to create the net
   *
   * Will be called in the base class constructor
   * before calling setupNet, but not in the streamer.
   * It sets any variables that the sreamer would persist
   * when saving or loading to file.
   *
   **/
  void setupPersistedVariables() override;

private:
  /**
   * @brief Fill out m_json from a file provided to the constructor
   *
   * Provided the string provided as inputFile to the constructor
   * is a known file type (root or json) this function retreives
   * the json string itself and puts it into m_json.
   *
   * @param tree_name   TTree name to check in when reading root files.
   **/
  void fillJson(std::string const &tree_name = m_defaultTreeName);

  /**
   * @brief Get json string from TTree.
   *
   * Given a TTree object, retrive the json string from the
   * standard branch. This is used to retrive a network previously
   * saved using writeNetToTTree.
   *
   * @param tree   TTree with the json saved inside.
   **/
  std::string readStringFromTTree(TTree &tree);

  /**
   * @brief Get json string from TTree.
   *
   * Given a TTree object, retrive the json string from the
   * standard branch. This is used to retrive a network previously
   * saved using writeNetToTTree.
   *
   * @param tree   TTree with the json saved inside.
   **/
  void writeStringToTTree(TTree &tree, std::string json_string);

  /**
   * @brief Stores a printable identifyer for the net. Not unique.
   **/
  std::string m_printable_name;

  // Suppling a ClassDef for writing to file.
  ClassDefOverride(VNetworkLWTNN, 1);
};

#endif
